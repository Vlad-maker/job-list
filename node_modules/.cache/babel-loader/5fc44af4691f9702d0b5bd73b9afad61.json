{"ast":null,"code":"import _toConsumableArray from\"/Users/vladislavufimtsev/Documents/dev/Study/job-list/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import{Badge}from'UI/Badge';import{Card}from'UI/Card';import{Stack}from'UI/Stack';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var JobPosition=function JobPosition(_ref){var _ref2;var id=_ref.id,company=_ref.company,logo=_ref.logo,isNew=_ref.new,featured=_ref.featured,position=_ref.position,role=_ref.role,level=_ref.level,postedAt=_ref.postedAt,contract=_ref.contract,location=_ref.location,languages=_ref.languages,tools=_ref.tools,handleAddFilter=_ref.handleAddFilter;var badges=(_ref2=[]).concat.apply(_ref2,[role,level].concat(_toConsumableArray(languages),_toConsumableArray(tools)));return/*#__PURE__*/_jsx(Card,{isFeatured:featured,children:/*#__PURE__*/_jsxs(\"div\",{className:\"job-position\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"job-position-info\",children:[/*#__PURE__*/_jsx(\"img\",{className:\"job-position-avatar\",src:logo,alt:company}),/*#__PURE__*/_jsxs(\"div\",{className:\"job-position-body\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"job-postion-company\",children:[/*#__PURE__*/_jsx(\"h3\",{children:company}),(isNew||featured)&&/*#__PURE__*/_jsxs(Stack,{children:[isNew&&/*#__PURE__*/_jsx(Badge,{variant:\"rounded\",colorScheme:\"primary\",children:\"NEW!\"}),featured&&/*#__PURE__*/_jsx(Badge,{variant:\"rounded\",colorScheme:\"dark\",children:\"FEATURED\"})]})]}),/*#__PURE__*/_jsx(\"h2\",{className:\"job-position-title\",children:position}),/*#__PURE__*/_jsxs(Stack,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"job-position-meta\",children:postedAt}),/*#__PURE__*/_jsx(\"div\",{className:\"job-position-meta\",children:contract}),/*#__PURE__*/_jsx(\"div\",{className:\"job-position-meta\",children:location})]})]})]}),/*#__PURE__*/_jsx(Stack,{children:badges.map(function(item){return/*#__PURE__*/_jsx(Badge,{onClick:function onClick(){return handleAddFilter(item);},children:item},item);})})]})});};export{JobPosition};","map":{"version":3,"sources":["/Users/vladislavufimtsev/Documents/dev/Study/job-list/src/components/JobPosition.jsx"],"names":["Badge","Card","Stack","JobPosition","id","company","logo","isNew","new","featured","position","role","level","postedAt","contract","location","languages","tools","handleAddFilter","badges","concat","map","item"],"mappings":"mJACA,OAASA,KAAT,KAAsB,UAAtB,CACA,OAASC,IAAT,KAAqB,SAArB,CACA,OAASC,KAAT,KAAsB,UAAtB,C,wFAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAed,cAdJC,CAAAA,EAcI,MAdJA,EAcI,CAbJC,OAaI,MAbJA,OAaI,CAZJC,IAYI,MAZJA,IAYI,CAXCC,KAWD,MAXJC,GAWI,CAVJC,QAUI,MAVJA,QAUI,CATJC,QASI,MATJA,QASI,CARJC,IAQI,MARJA,IAQI,CAPJC,KAOI,MAPJA,KAOI,CANJC,QAMI,MANJA,QAMI,CALJC,QAKI,MALJA,QAKI,CAJJC,QAII,MAJJA,QAII,CAHJC,SAGI,MAHJA,SAGI,CAFJC,KAEI,MAFJA,KAEI,CADJC,eACI,MADJA,eACI,CACJ,GAAMC,CAAAA,MAAM,CAAG,WAAGC,MAAH,cAAUT,IAAV,CAAgBC,KAAhB,4BAA0BI,SAA1B,qBAAwCC,KAAxC,GAAf,CAEA,mBACE,KAAC,IAAD,EAAM,UAAU,CAAER,QAAlB,uBACE,aAAK,SAAS,CAAC,cAAf,wBACE,aAAK,SAAS,CAAC,mBAAf,wBACE,YACE,SAAS,CAAC,qBADZ,CAEE,GAAG,CAAEH,IAFP,CAGE,GAAG,CAAED,OAHP,EADF,cAME,aAAK,SAAS,CAAC,mBAAf,wBACE,aAAK,SAAS,CAAC,qBAAf,wBACE,oBAAKA,OAAL,EADF,CAEG,CAACE,KAAK,EAAIE,QAAV,gBACC,MAAC,KAAD,YACGF,KAAK,eACJ,KAAC,KAAD,EAAO,OAAO,CAAC,SAAf,CAAyB,WAAW,CAAC,SAArC,kBAFJ,CAMGE,QAAQ,eACP,KAAC,KAAD,EAAO,OAAO,CAAC,SAAf,CAAyB,WAAW,CAAC,MAArC,sBAPJ,GAHJ,GADF,cAkBE,WAAI,SAAS,CAAC,oBAAd,UACGC,QADH,EAlBF,cAqBE,MAAC,KAAD,yBACE,YAAK,SAAS,CAAC,mBAAf,UACGG,QADH,EADF,cAIE,YAAK,SAAS,CAAC,mBAAf,UACGC,QADH,EAJF,cAOE,YAAK,SAAS,CAAC,mBAAf,UACGC,QADH,EAPF,GArBF,GANF,GADF,cAyCE,KAAC,KAAD,WACGI,MAAM,CAACE,GAAP,CAAW,SAAAC,IAAI,qBACd,KAAC,KAAD,EAEE,OAAO,CAAE,yBAAMJ,CAAAA,eAAe,CAACI,IAAD,CAArB,EAFX,UAGEA,IAHF,EACOA,IADP,CADc,EAAf,CADH,EAzCF,GADF,EADF,CAsDD,CAxED,CA0EA,OAAQnB,WAAR","sourcesContent":["import PropTypes from 'prop-types';\nimport { Badge } from 'UI/Badge';\nimport { Card } from 'UI/Card';\nimport { Stack } from 'UI/Stack';\n\nconst JobPosition = ({\n  id,\n  company,\n  logo,\n  new: isNew,\n  featured,\n  position,\n  role,\n  level,\n  postedAt,\n  contract,\n  location,\n  languages,\n  tools,\n  handleAddFilter,\n}) => {\n  const badges = [].concat(role, level, ...languages, ...tools);\n\n  return (\n    <Card isFeatured={featured}>\n      <div className='job-position'>\n        <div className='job-position-info'>\n          <img\n            className='job-position-avatar'\n            src={logo}\n            alt={company}\n          />\n          <div className='job-position-body'>\n            <div className='job-postion-company'>\n              <h3>{company}</h3>\n              {(isNew || featured) && (\n                <Stack>\n                  {isNew && (\n                    <Badge variant=\"rounded\" colorScheme=\"primary\">\n                      NEW!\n                    </Badge>\n                  )}\n                  {featured && (\n                    <Badge variant=\"rounded\" colorScheme=\"dark\">\n                      FEATURED\n                    </Badge>\n                  )}\n                </Stack>\n              )}\n            </div>\n            <h2 className='job-position-title'>\n              {position}\n            </h2>\n            <Stack>\n              <div className='job-position-meta'>\n                {postedAt}\n              </div>\n              <div className='job-position-meta'>\n                {contract}\n              </div>\n              <div className='job-position-meta'>\n                {location}\n              </div>\n            </Stack>\n          </div>\n        </div>\n        <Stack>\n          {badges.map(item => (\n            <Badge\n              key={item}\n              onClick={() => handleAddFilter(item)}\n            >{item}</Badge>\n          ))}\n        </Stack>\n      </div>\n    </Card>\n  )\n}\n\nexport {JobPosition};\n\nJobPosition.propTypes = {\n  id: PropTypes.number,\n  company: PropTypes.string,\n  logo: PropTypes.string,\n  new: PropTypes.bool,\n  featured: PropTypes.bool,\n  position: PropTypes.string,\n  role: PropTypes.string,\n  level: PropTypes.string,\n  postedAt: PropTypes.string,\n  contract: PropTypes.string,\n  location: PropTypes.string,\n  languages: PropTypes.arrayOf(PropTypes.string),\n  tools: PropTypes.arrayOf(PropTypes.string),\n  handleAddFilter: PropTypes.func,\n};"]},"metadata":{},"sourceType":"module"}